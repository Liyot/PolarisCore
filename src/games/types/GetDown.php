<?php

namespace Polaris\games\types;


use pocketmine\block\VanillaBlocks;
use pocketmine\event\entity\EntityDamageEvent;
use pocketmine\item\ItemIds;
use pocketmine\Server;
use pocketmine\world\Position;
use Polaris\games\GameLoader;
use Polaris\games\Zone;
use Polaris\player\PolarisPlayer;
use Polaris\utils\GameUtils;
use Polaris\utils\ListenerUtils;

class GetDown extends RoundedGames
{

    public function __construct(string $mapName,  int $round = 0, array $players = [])
    {
        $count = GameLoader::getInstance()->getGameCount($this);
        $worldManager = Server::getInstance()->getWorldManager();
        $this->copyWorld("getdownnn", ($nname = "getdown". $count));
        $worldManager->loadWorld($nname);
        $world = $worldManager->getWorldByName($nname);
        $this->zone = new Zone("getdown", new Position(0,0,0, $world), $this, new Position(999, 999, 999, $world), new Position(0, 100,0, $world));
        parent::__construct("GetDown", GameUtils::ID_GETDOWN, PHP_INT_MAX, 5, 20, 3, true, $mapName, $round, $players);
    }

    public function onStart(): void
    {
        foreach ($this->players as $player){
        }
    }

    public function join(PolarisPlayer $player): void
    {
        $player->teleport($this->zone->getMainPosition());
        parent::join($player); // TODO: Change the autogenerated stub
    }

    public function initListener(): void
    {
        $this->addCallback(ListenerUtils::PLAYER_MOVE, function (EntityDamageEvent $event): void{
            $player = $event->getEntity();
            $cause = $event->getCause();
            $world = $player->getWorld();
            $pos = $player->getPosition();
            if($player instanceof PolarisPlayer){
                if($cause === EntityDamageEvent::CAUSE_FALL){
                    $block = $world->getBlock($pos->subtract(0, 1, 0));
                    if ($block->getId() === ItemIds::SEA_LANTERN){
                        $this->addScore($player, 5);
                        $world->setBlock($pos->subtract(0, 1, 0), VanillaBlocks::ORANGE_GLAZED_TERRACOTTA());
                    }
                }
            }
        });
       // $this->addCallback('on');
    }

    public function addScore(PolarisPlayer $player, int $score): void {
        $id = $player->getUniqueId()->toString();
        if(isset($this->scores[$id])){
            $this->scores[$id] += $score;
        }else{
            $this->scores[$id] = $score;
        }
        $player->sendActionBarMessage($score);
    }

    public function getName(): string
    {
        return 'GetDown';
    }

    public function onStop(): void
    {
       Server::getInstance()->getWorldManager()->unloadWorld(Server::getInstance()->getWorldManager()->getWorldByName($this->zone->world->getFolderName()));
       $this->removeWorld(Server::getInstance()->getDataPath(). "worlds\\".$this->zone->world->getFolderName());
       GameLoader::getInstance()->removeGame($this);
       parent::onStop();
    }
}