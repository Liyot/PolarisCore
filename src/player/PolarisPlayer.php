<?php

namespace Polaris\player;

use pocketmine\entity\Human;
use pocketmine\entity\Location;
use pocketmine\form\Form;
use pocketmine\item\ItemIdentifier;
use pocketmine\item\ItemIds;
use pocketmine\lang\Translatable;
use pocketmine\math\Vector3;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\player\GameMode;
use pocketmine\player\Player;
use pocketmine\Server;
use pocketmine\world\Position;
use Polaris\entity\FloatingText;
use Polaris\games\Game;
use Polaris\games\GameInterface;
use Polaris\games\team\Team;
use Polaris\games\Types\RoundedGames;
use Polaris\groups\GroupManager;
use Polaris\item\Specialitem;
use Polaris\rank\PremiumRank;
use Polaris\rank\Rank;
use Polaris\trait\VectorUtilsTrait;
use Polaris\utils\FormReference;
use Polaris\utils\GameUtils;
use Polaris\utils\PlayerUtils;
use Polaris\utils\Scoreboard;

class PolarisPlayer extends Player
{

    use VectorUtilsTrait;

    private GroupManager $groupManager;

    public array $request = [];

    private Rank $rank;

    private Scoreboard $activeScoreboard;

    public Game|null $actualGame = null;

    private Human $linkedEntity;

    public bool $canDie = true;

    public bool $isRiding = false, $inGame = false;

    protected FloatingText $jumpText;

    private PlayerProperties $properties;

    private ?Team $team = null;
    /**
     * @var self[]
     */
    private array $viewerSpectator = [];

    public ?self $currentViewerPlayer = null;

    public bool $isAbleToBeAViewerSpectator = false; //smr le nom est vrm long ptdr
    /**
     * @var bool[]
     */
    public array $hasAccepted = [];

    public function initEntity(CompoundTag $nbt): void
    {
        parent::initEntity($nbt);
        $this->player = $this;
        $this->rank = new PremiumRank();
        $this->properties = new PlayerProperties($this);
        $this->setScoreboard(PlayerUtils::getBaseScoreboard($this));
        $this->groupManager = new GroupManager($this);
        $this->jumpText = new FloatingText(Location::fromObject(new Vector3(-51, 61, -65), GameUtils::getSpawnWorld()));
        $this->jumpText->spawnTo($this);

        $this->setSpawn(new Position(-57, 60, -68, Server::getInstance()->getWorldManager()->getWorldByName("PolarisSpawn")));
    }

    protected function entityBaseTick(int $tickDiff = 1): bool
    {
        foreach($this->viewerSpectator as $player)
        {
            if($player->invisible) $player->setInvisible();
            $player->teleport($this->getPosition());
        }
        return parent::entityBaseTick($tickDiff);
    }

    public function canDie(): bool
    {
        return $this->canDie;
    }

    public function addResquest(string $name, mixed $value = null): void
    {
        $this->request[$name][] = $value;
    }

    public function isRiding(): bool
    {
        return $this->isRiding;
    }

    public function setRiding(bool $ride): void
    {
        $this->isRiding = $ride;
    }

    public function getScoreboard(): Scoreboard
    {
        return $this->activeScoreboard;
    }

    public function setJumpText(FloatingText $text): void
    {
        $this->jumpText = $text;
    }

    public function getJumpText(): FloatingText
    {
        return $this->jumpText;
    }

    public function saveNBT(): CompoundTag
    {
        $nbt = parent::saveNBT();
        !isset($this->properties) ?: $this->properties->save($nbt);

        return $nbt; // TODO: Change the autogenerated stub
    }

    public function setScoreboard(Scoreboard $scoreboard): void
    {
        $this->activeScoreboard = $scoreboard;
    }


    public function getRequest(string $name): mixed
    {
        return $this->request[$name] ?? null;
    }

    public function isPremium(): bool
    {
        return $this->rank instanceof PremiumRank;
    }

    public function onUpdate(int $currentTick): bool
    {
        if(isset($this->linkedEntity))
        {
            $this->linkedEntity->location = $this->location;
        }

        return parent::onUpdate($currentTick);
    }


    public function isInGame(): bool
    {
        return $this->inGame;
    }

    public function teleportToSpawn(): void
    {
        $this->teleport(new Position(-57, 60, -68, Server::getInstance()->getWorldManager()->getWorldByName("PolarisSpawn")));
        $this->getInventory()->clearAll();
        $this->getArmorInventory()->clearAll();
        $this->giveHubStuff();
        $this->getHungerManager()->addFood(20);
        $this->setHealth(20);
        $this->getEffects()->clear();
        $this->canDie = false;
        $this->setGamemode(GameMode::SURVIVAL());
    }

    public function giveHubStuff(): void
    {
        $inventory = $this->getInventory();
        $item = new Specialitem(new ItemIdentifier(ItemIds::BOOK, 0), "Book", function (PolarisPlayer $player) {
            $player->sendForm(FormReference::MDJForm());
        });
        $inventory->setItem(4, $item->setCustomName("§l§bMode De Jeux"));
    }

    public function getActualGame(): ?Game
    {
        return $this->actualGame;
    }

    public function link(Human $entity): void
    {
        $this->linkedEntity = $entity;
    }

    public function push(): void
    {
        $vector = $this->getMatchedVector(1, 1);
        $this->getMotion()->add($vector->x, $vector->y, $vector->z);
    }

    public function getSaveData(): CompoundTag
    {
        return parent::getSaveData(); // TODO: Change the autogenerated stub
    }

    public function joinGame(GameInterface $game): void
    {
        $group = $this->groupManager->getGroup();
        if ($this->getGroupManager()->hasGroup()) {
            foreach ($group?->getMembers() as $member) {
                if (!$this->inGame) {
                    PlayerUtils::sendVerification($member, function (PolarisPlayer $player) use ($member, $game) {
                        $member->sendMessage("§c{$this->getName()} §7à rejoint la partie" . $game->getName());
                        $game->join($player);
                    });
                }
            }
        } else {
            $game->join($this);
        }
    }

    public function sendForm(Form $form): void
    {
        if ($this->properties->getProperties("cleanScreen") === true) {
            $this->properties->setProperties("cleanScreen", false);
            parent::sendForm($form); // TODO: Change the autogenerated stub
        }
    }

    public function canJoin(GameInterface $game): bool
    {
        if (!$game instanceof RoundedGames) {
            return !$game->properties->getProperties("Starting") && !$game->properties->getProperties("Ending") && $this->hasAccepted($game);
        }
        return $game->properties->getProperties("Starting") && $this->hasAccepted($game);
    }

    public function hasAccepted(GameInterface $game): bool
    {
        return $this->hasAccepted[$game->getName()] ?? false;
    }

    public function getGroupManager(): GroupManager
    {
        return $this->groupManager;
    }

    public function getTeam(): ?Team
    {
        return $this->team;
    }

    public function setTeam(Team $team): void
    {
        $this->team = $team;
    }

    public function removeTeam(): void
    {
        $this->team = null;
    }

    public function getViewersPlayers() : array
    {
        return $this->viewerSpectator;
    }

    public function addViewer(self ...$polarisPlayers): void
    {
        foreach($polarisPlayers as $polarisPlayer)
        {
            $polarisPlayer->currentViewerPlayer = $this;
            $this->viewerSpectator[] = $polarisPlayer;
        }
    }

    public function removeViewer(self ...$polarisPlayers): void
    {
        foreach($polarisPlayers as $polarisPlayer)
        {
            $polarisPlayer->currentViewerPlayer = null;
        }
        $this->viewerSpectator = array_diff($polarisPlayers, $this->viewerSpectator);
    }

    public function setAbleToBeAViewerSpectator(bool $enable = true): void
    {
        $this->isAbleToBeAViewerSpectator = $enable;
    }

    public function isAbleToBeAViewerSpectator(): bool
    {
        return $this->isAbleToBeAViewerSpectator;
    }

    public function getPlayerProperties(): PlayerProperties
    {
        return $this->properties;
    }

    public function onPostDisconnect(string $reason, Translatable|string|null $quitMessage): void
    {
        $this->getActualGame()?->leave($this);
        parent::onPostDisconnect($reason, $quitMessage); // TODO: Change the autogenerated stub
    }

    public function __toString()
    {
        return $this->getName();
    }
}