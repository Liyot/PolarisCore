<?php

namespace UnknowL\Entity;

use pocketmine\entity\Entity;
use pocketmine\entity\EntitySizeInfo;
use pocketmine\entity\Location;
use pocketmine\entity\projectile\Projectile;
use pocketmine\math\Vector3;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\network\mcpe\protocol\types\entity\EntityIds;
use pocketmine\player\Player;
use UnknowL\Player\PolarisPlayer;
use UnknowL\Trait\VectorUtilsTrait;

class ShulkerEntity extends Entity{

    use VectorUtilsTrait;

    /**
     * @var Vector3[]
     */
    private array $recordedPosition = [];

    private bool $forGame = false;

    public function __construct(Location $location, bool $usedforgame = false, ?CompoundTag $nbt = null)
    {
        $owning = $this->getOwningEntity();
        $this->forGame = $usedforgame;
        $this->player = $owning ?? null;
        parent::__construct($location, $nbt);
    }


    protected function getInitialSizeInfo(): EntitySizeInfo
    {
        return new EntitySizeInfo(0.5, 0.5, 0.5);
    }

    public function onCollideWithPlayer(Player $player): void
    {
        if($this->getOwningEntity() instanceof PolarisPlayer){
            if($player->getUniqueId()->equals($this->getOwningEntity()?->getUniqueId())) {
                return;
            }
            var_dump("aa");
            $this->flagForDespawn();
            $player->kill();
        }
        parent::onCollideWithPlayer($player); // TODO: Change the autogenerated stub
    }

    public function onUpdate(int $currentTick): bool
    {
        if($this->forGame){
            if($currentTick % 20 === 0){
                $this->recordedPosition[] = $this->getPosition()->asVector3();
                $count = count($this->recordedPosition);
                if($count > 10){
                    foreach ($this->recordedPosition as $i => $iValue) {
                        if($iValue->round()->equals($this->recordedPosition[$i === 10? $i : $i + 1]->round())) {
                            $this->flagForDespawn();
                        }
                    }
                    $this->recordedPosition = array_slice($this->recordedPosition, 1);
                }
            }
        }
        return parent::onUpdate($currentTick);
    }

    public static function getNetworkTypeId(): string
    {
        return EntityIds::SHULKER_BULLET;
    }
}